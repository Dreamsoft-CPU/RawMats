// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  displayName         String
  profilePicture      String                @default("/users/default.jpg")
  phoneNumber         String                @default("None")
  role                Role                  @default(USER)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Supplier            Supplier[]
  Favorite            Favorite[]
  Album               Album[]
  Notification        Notification[]
  ConversationMembers ConversationMembers[]
  Message             Message[]
  Rating              Rating[]
}

enum Role {
  USER
  ADMIN
}

model Supplier {
  id                String        @id @default(cuid())
  userId            String        @unique
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessPicture   String        @default("/businesses/default.jpg")
  businessName      String
  businessLocation  String
  locationName      String        @default("None")
  businessPhone     String        @default("None")
  businessDocuments String[]
  bio               String        @default("None")
  verified          Boolean       @default(false)
  verifiedDate      DateTime      @updatedAt
  Product           Product[]
  SalesReport       SalesReport[]
}

model Favorite {
  id            String          @id @default(cuid())
  userId        String
  productId     String
  createdAt     DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  AlbumFavorite AlbumFavorite[]
}

model AlbumFavorite {
  id         String   @id @default(cuid())
  albumId    String
  favoriteId String
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  album      Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
}

model Product {
  id              String            @id @default(cuid())
  name            String
  description     String
  image           String            @default("/products/default.jpg")
  price           Float
  supplierId      String
  dateAdded       DateTime          @default(now())
  verified        Boolean           @default(false)
  verifiedDate    DateTime          @updatedAt
  supplier        Supplier          @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  favorites       Favorite[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ratings         Rating[]
  SalesReportItem SalesReportItem[]
}

model Album {
  id            String          @id @default(cuid())
  name          String
  description   String
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  AlbumFavorite AlbumFavorite[]
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String                @id @default(cuid())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  messages  Message[]
  members   ConversationMembers[]
}

model ConversationMembers {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model SalesReport {
  id              String            @id @default(cuid())
  supplierId      String
  totalAmount     Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  supplier        Supplier          @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  SalesReportItem SalesReportItem[]
}

model SalesReportItem {
  id            String      @id @default(cuid())
  salesReportId String
  productId     String
  quantity      Int
  totalPrice    Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  salesReport   SalesReport @relation(fields: [salesReportId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}
